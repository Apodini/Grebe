//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: tasks.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate TaskServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol TaskServiceService {
  func getTask(_ request: GetTaskRequest, callOptions: CallOptions?) -> UnaryCall<GetTaskRequest, GetTaskResponse>
  func uploadTasks(callOptions: CallOptions?) -> ClientStreamingCall<UploadTasksRequest, UploadTasksResponse>
  func listTasks(_ request: ListTasksRequest, callOptions: CallOptions?, handler: @escaping (ListTasksResponse) -> Void) -> ServerStreamingCall<ListTasksRequest, ListTasksResponse>
  func taskChat(callOptions: CallOptions?, handler: @escaping (TaskChatResponse) -> Void) -> BidirectionalStreamingCall<TaskChatRequest, TaskChatResponse>
}

internal final class TaskServiceServiceClient: GRPCClient, TaskServiceService {
  internal let connection: ClientConnection
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the TaskService service.
  ///
  /// - Parameters:
  ///   - connection: `ClientConnection` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(connection: ClientConnection, defaultCallOptions: CallOptions = CallOptions()) {
    self.connection = connection
    self.defaultCallOptions = defaultCallOptions
  }

  /// Asynchronous unary call to GetTask.
  ///
  /// - Parameters:
  ///   - request: Request to send to GetTask.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getTask(_ request: GetTaskRequest, callOptions: CallOptions? = nil) -> UnaryCall<GetTaskRequest, GetTaskResponse> {
    return self.makeUnaryCall(path: "/TaskService/GetTask",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous client-streaming call to UploadTasks.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func uploadTasks(callOptions: CallOptions? = nil) -> ClientStreamingCall<UploadTasksRequest, UploadTasksResponse> {
    return self.makeClientStreamingCall(path: "/TaskService/UploadTasks",
                                        callOptions: callOptions ?? self.defaultCallOptions)
  }

  /// Asynchronous server-streaming call to ListTasks.
  ///
  /// - Parameters:
  ///   - request: Request to send to ListTasks.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func listTasks(_ request: ListTasksRequest, callOptions: CallOptions? = nil, handler: @escaping (ListTasksResponse) -> Void) -> ServerStreamingCall<ListTasksRequest, ListTasksResponse> {
    return self.makeServerStreamingCall(path: "/TaskService/ListTasks",
                                        request: request,
                                        callOptions: callOptions ?? self.defaultCallOptions,
                                        handler: handler)
  }

  /// Asynchronous bidirectional-streaming call to TaskChat.
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func taskChat(callOptions: CallOptions? = nil, handler: @escaping (TaskChatResponse) -> Void) -> BidirectionalStreamingCall<TaskChatRequest, TaskChatResponse> {
    return self.makeBidirectionalStreamingCall(path: "/TaskService/TaskChat",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol TaskServiceProvider: CallHandlerProvider {
  func getTask(request: GetTaskRequest, context: StatusOnlyCallContext) -> EventLoopFuture<GetTaskResponse>
  func uploadTasks(context: UnaryResponseCallContext<UploadTasksResponse>) -> EventLoopFuture<(StreamEvent<UploadTasksRequest>) -> Void>
  func listTasks(request: ListTasksRequest, context: StreamingResponseCallContext<ListTasksResponse>) -> EventLoopFuture<GRPCStatus>
  func taskChat(context: StreamingResponseCallContext<TaskChatResponse>) -> EventLoopFuture<(StreamEvent<TaskChatRequest>) -> Void>
}

extension TaskServiceProvider {
  internal var serviceName: String { return "TaskService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "GetTask":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.getTask(request: request, context: context)
        }
      }

    case "UploadTasks":
      return ClientStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.uploadTasks(context: context)
      }

    case "ListTasks":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listTasks(request: request, context: context)
        }
      }

    case "TaskChat":
      return BidirectionalStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.taskChat(context: context)
      }

    default: return nil
    }
  }
}

